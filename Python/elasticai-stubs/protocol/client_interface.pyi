from abc import ABCMeta, abstractmethod
from typing import Callable

class PubSubInterface(metaclass=ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass: type) -> bool: ...
    @abstractmethod
    def get_client_id(self) -> str: ...
    @abstractmethod
    def publish(self, topic: str, message: str, retain: bool = False) -> None: ...
    @abstractmethod
    def subscribe(self, topic: str, handler: Callable[[str, str], None]) -> None: ...
    @abstractmethod
    def unsubscribe(self, topic: str) -> None: ...
