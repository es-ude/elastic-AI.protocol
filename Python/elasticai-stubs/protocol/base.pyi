from enum import Enum
from typing import Callable

from elasticai.protocol.client_interface import PubSubInterface as PubSubInterface

class DeviceType(str, Enum):
    APPLICATION = "APP"
    NODE = "NODE"

class DeviceState(str, Enum):
    OFFLINE = "OFFLINE"
    ONLINE = "ONLINE"

class Protocol:
    def __init__(
        self,
        handler: PubSubInterface,
        device_type: DeviceType = ...,
        base_url: str = "eaip://uni-due.de",
    ) -> None: ...
    def publish_status(
        self,
        device_state: DeviceState,
        additional_information: dict[str, str] | None = None,
    ) -> None: ...
    def publish_data(self, data_id: str, data: str) -> None: ...
    def publish_start(self, device_id: str, data_id: str) -> None: ...
    def publish_stop(self, device_id: str, data_id: str) -> None: ...
    def publish_do(
        self, device_id: str, command: str, settings: str | None = None
    ) -> None: ...
    def publish_done(self, device_id: str, command: str, result: str) -> None: ...
    def subscribe_status(
        self, device_id: str, handler: Callable[[str, str], None]
    ) -> None: ...
    def subscribe_data(
        self, device_id: str, data_id: str, handler: Callable[[str, str], None]
    ) -> None: ...
    def subscribe_start(
        self, data_id: str, handler: Callable[[str, str], None]
    ) -> None: ...
    def subscribe_stop(
        self, data_id: str, handler: Callable[[str, str], None]
    ) -> None: ...
    def subscribe_do(
        self, command: str, handler: Callable[[str, str], None]
    ) -> None: ...
    def subscribe_done(
        self, device_id: str, command: str, handler: Callable[[str, str], None]
    ) -> None: ...
    def unsubscribe_status(self, device_id: str) -> None: ...
    def unsubscribe_data(self, device_id: str, data_id: str) -> None: ...
    def unsubscribe_start(self, data_id: str) -> None: ...
    def unsubscribe_stop(self, data_id: str) -> None: ...
    def unsubscribe_do(self, command: str) -> None: ...
    def unsubscribe_done(self, device_id: str, command: str) -> None: ...
    @staticmethod
    def parse_status(status: str) -> dict[str, str]: ...
